package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"time"

	log "github.com/sirupsen/logrus"
)

type Response struct {
	Dockerfile string `json:"dockerfile"`
	Message    string `json:"message"`
}

func main() {
	// Check if the input data argument is provided
	if len(os.Args) != 3 {
		log.Fatal("Usage: go run main.go <input-json-or-yaml-file>")
		return
	}

	// Extract the input file path from the command-line argument
	inputFilePath := os.Args[1]
	outputFilePath := os.Args[2]

	// Read the input data from the file
	inputData, err := os.ReadFile(inputFilePath)
	if err != nil {
		log.Errorf("Error reading input data from file: %v\n", err)
		return
	}

	// Define the server URL
	serverURL := "http://localhost:3333/generate"

	// Set the Content-Type header based on the file extension
	contentType := "application/json"
	if isYAMLFile(inputFilePath) {
		contentType = "application/yaml"
	}

	// Create an HTTP client with a timeout (adjust the timeout as needed)
	client := &http.Client{
		Timeout: 10 * time.Second,
	}

	// Create a request body with the input data
	body := bytes.NewBuffer(inputData)

	// Send a POST request to the server
	resp, err := client.Post(serverURL, contentType, body)
	if err != nil {
		log.Errorf("Error sending POST request: %v\n", err)
		return
	}
	defer resp.Body.Close()

	// Read the response body
	responseBody, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Errorf("Error reading response body: %v\n", err)
		return
	}

	// Check the HTTP status code
	if resp.StatusCode != http.StatusOK {
		log.Errorf("Server returned a non-OK status code: %d\n", resp.StatusCode)
		log.Errorf("Response Body: %s\n", responseBody)
		return
	}

	// Print the response from the server OK
	// fmt.Println("Response from server:")
	// fmt.Printf("%s\n", responseBody)

	var response map[string]interface{}

	err = json.Unmarshal(responseBody, &response)
	if err != nil {
		fmt.Printf("Error parsing server response: %v\n", err)
		return
	}

	// Print the Dockerfile content
	fmt.Println("Generated Dockerfile:")

	dockerfile := "# Dockerfile generated by GenVal\n\n" + response["dockerfile"].(string)

	// Write the Dockerfile content to a file named "Dockerfile"
	err = os.WriteFile(outputFilePath, []byte(dockerfile), 0644)
	if err != nil {
		fmt.Printf("Error writing Dockerfile to disk: %v\n", err)
		return
	}

	fmt.Println("Dockerfile has been saved!")

}

func isYAMLFile(filePath string) bool {
	// Check if the file has a .yaml or .yml extension
	return filepath.Ext(filePath) == ".yaml" || filepath.Ext(filePath) == ".yml"
}
